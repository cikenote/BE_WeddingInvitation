// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wedding.DataAccess.Context;

#nullable disable

namespace Wedding.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240912152654_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8fa7c7bb-b4dc-480d-a660-e07a90855d5d",
                            ConcurrencyStamp = "Customer",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "8fa7c7bb-daa5-a660-bf02-82301a5eb327",
                            ConcurrencyStamp = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "TranThaiSon493",
                            RoleId = "8fa7c7bb-daa5-a660-bf02-82301a5eb327"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wedding.Model.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendClearEmail")
                        .HasColumnType("bit");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "TranThaiSon493",
                            AccessFailedCount = 0,
                            Address = "123 Admin St",
                            AvatarUrl = "https://example.com/avatar.png",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cf3c5719-5fde-44ee-ac2e-4df4f116d288",
                            Country = "Country",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            Gender = "Male",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDcwR4kWQKkc5tHG5REk2btyryYH+xyN6tuI0WpQXdnZdxZi/+7ikD744VwuWgdD1Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2c10ebf3-91fd-4bb8-b680-6481ae9bee4c",
                            SendClearEmail = false,
                            TaxNumber = "123456789",
                            TwoFactorEnabled = false,
                            UpdateTime = new DateTime(2003, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Wedding.Model.Domain.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeactivatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MergedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MergedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCard")
                        .HasColumnType("int");

                    b.Property<double?>("TotalEarned")
                        .HasColumnType("float");

                    b.Property<float?>("TotalRate")
                        .HasColumnType("real");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Wedding.Model.Domain.CartDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CardPrice")
                        .HasColumnType("float");

                    b.Property<string>("CardTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CartHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartHeaderId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Wedding.Model.Domain.CartHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CartHeaders");
                });

            modelBuilder.Entity("Wedding.Model.Domain.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Wedding.Model.Domain.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallToAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FooterContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalizationTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreHeaderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58257390-4322-4645-813e-0380a31fda41"),
                            BodyContent = "Dear [UserFullName],<br><br>Welcome to Wedding! We are excited to have you join our learning community.",
                            CallToAction = "<a href=\"https://cursuslms.xyz/user/sign-in\">Login</a>",
                            Category = "Welcome",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Thank you for signing up!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Welcome to Wedding!",
                            TemplateName = "WelcomeEmail"
                        },
                        new
                        {
                            Id = new Guid("2b7f9b3c-c912-4348-b338-e2fb1f0fddfd"),
                            BodyContent = "Hi [UserFullName],<br><br>We received a request to reset your password. Click the link below to reset your password.",
                            CallToAction = "https://cursuslms.xyz/sign-in/verify-email?userId=user.Id&token=Uri.EscapeDataString(token)",
                            Category = "Security",
                            FooterContent = "If you did not request a password reset, please ignore this email.",
                            Language = "English",
                            PersonalizationTags = "[UserFullName], [ResetPasswordLink]",
                            PreHeaderText = "Reset your password to regain access",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Reset Your Password",
                            TemplateName = "ForgotPasswordEmail"
                        },
                        new
                        {
                            Id = new Guid("62490d97-c280-4e15-8f96-87575d253bfe"),
                            BodyContent = "<p>Thank you for registering your Wedding account. Click here to go back the page</p>",
                            CallToAction = "<a href=\"{{Login}}\">Login now</a>",
                            Category = "Verify",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LinkLogin}",
                            PreHeaderText = "User Account Verified!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Wedding Verify Email",
                            TemplateName = "SendVerifyEmail"
                        },
                        new
                        {
                            Id = new Guid("1642d338-5f7e-4e1f-883d-eb4c21f98e06"),
                            BodyContent = "<p>Hello {FirstName},</p><p>Click <a href=\"{ResetLink}\">here</a> to reset your password.</p>",
                            CallToAction = "<a href=\"{{ResetLink}}\">Reset Password</a>",
                            Category = "Security",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {ResetLink}",
                            PreHeaderText = "Reset your password to regain access.",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Reset Your Password",
                            TemplateName = "ChangePassword"
                        },
                        new
                        {
                            Id = new Guid("2c1d95b0-b558-465d-89db-636fed8b8434"),
                            BodyContent = "Dear [UserFullName],<br><br>Your account will be deleted after 14 days.",
                            CallToAction = "<a href=\"https://cursuslms.xyz/user/sign-in\">Login</a>",
                            Category = "Remind Account",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Hello!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Remind Delete Account!",
                            TemplateName = "RemindDeleteAccount"
                        },
                        new
                        {
                            Id = new Guid("337e7ed1-7c55-4b56-b095-4a1474779627"),
                            BodyContent = "Dear [UserFullName],<br><br>You have completed our course program, you can take new courses to increase your knowledge and skills.",
                            CallToAction = "<a href=\"https://cursuslms.xyz/user/sign-in\">Login</a>",
                            Category = "Course completed",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Hello!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Congratulations on completing the course!",
                            TemplateName = "CustomerCompleteCourse"
                        },
                        new
                        {
                            Id = new Guid("0aa21827-780a-4dd9-82a8-4f57b6c195ab"),
                            BodyContent = "Dear [UserFullName],<br><br>Your account has been deleted.",
                            CallToAction = "<a href=\"https://cursuslms.xyz/user/sign-in\">Login</a>",
                            Category = "Delete Account",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Hello!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Delete Account!",
                            TemplateName = "DeleteAccount"
                        },
                        new
                        {
                            Id = new Guid("e07a70ce-b52e-47aa-8d77-df892816757a"),
                            BodyContent = "Dear {FirstName} {LastName},<br><br>\r\n\r\n                    This email confirms that your payout request has been processed successfully.\r\n                    <br>\r\n                    <strong>Payout Details:</strong>\r\n                    <ul>\r\n                    <li>Amount: {PayoutAmount}</li>\r\n                    <li>Transaction Date: {TransactionDate}</li> \r\n                    </ul>\r\n                    <br>\r\n                    You can view your payout history in your customer dashboard. \r\n                    <br> \r\n                    Thank you for being a valued Wedding customer!\r\n                    <br>",
                            CallToAction = "<a href=\"https://cursuslms.xyz/user/sign-in\">Login</a>",
                            Category = "Payout",
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}, {PayoutAmount}, {TransactionDate}",
                            PreHeaderText = "Payout Successful!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Wedding Team",
                            Status = 1,
                            SubjectLine = "Your Wedding Payout is Complete!",
                            TemplateName = "NotifyCustomerPaymentReceived"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wedding.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wedding.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wedding.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wedding.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wedding.Model.Domain.CartDetails", b =>
                {
                    b.HasOne("Wedding.Model.Domain.CartHeader", "CartHeader")
                        .WithMany()
                        .HasForeignKey("CartHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartHeader");
                });

            modelBuilder.Entity("Wedding.Model.Domain.CartHeader", b =>
                {
                    b.HasOne("Wedding.Model.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Wedding.Model.Domain.Customer", b =>
                {
                    b.HasOne("Wedding.Model.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });
#pragma warning restore 612, 618
        }
    }
}
